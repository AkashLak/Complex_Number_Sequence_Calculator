/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author akash
 */

import java.awt.Color;

public class frmAlgorithmDesign extends javax.swing.JFrame {

    /**
     * Creates new form frmAlgorithmDesign
     */
    
    // integer variable declared to store the Text input for validation
    int Validate_Integer = 0;
    
    // boolean variable declared to validate the Text input and Prime check
    boolean Check_Flag = false;
    boolean Prime_Result = false;
    
    // double variables declared to store the input Text field, Factorial and Fibonacci Results
    double UI_Textvalue;
    double Factorial_Result;
    double Fibonacci_Result;
    
    public frmAlgorithmDesign() {
        //getContentPane().setBackground(Color.GRAY);
        initComponents();
        
        // Calling ProgInit procedure, to initialize input text fields, Error Message label, Answer labels and clears the Radio buttons
        ProgInit();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnGroup = new javax.swing.ButtonGroup();
        lblTitle = new javax.swing.JLabel();
        jPanelMain = new javax.swing.JPanel();
        txtInput = new javax.swing.JTextField();
        rbtnFactorial = new javax.swing.JRadioButton();
        rbtnPrime = new javax.swing.JRadioButton();
        rbtnFibonaccii = new javax.swing.JRadioButton();
        lblTextMsg = new javax.swing.JLabel();
        lblFactorialAns = new javax.swing.JLabel();
        lblPrimeAns = new javax.swing.JLabel();
        lblFibonacciAns = new javax.swing.JLabel();
        lblErrorMsg = new javax.swing.JLabel();
        rbtnAll3 = new javax.swing.JRadioButton();
        btnReset = new javax.swing.JButton();
        lblSubtitle = new javax.swing.JLabel();
        lblInst1 = new javax.swing.JLabel();
        lblInst2 = new javax.swing.JLabel();
        lblInst3 = new javax.swing.JLabel();
        lblInst4 = new javax.swing.JLabel();
        lblIMG = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblTitle.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblTitle.setForeground(new java.awt.Color(0, 0, 255));
        lblTitle.setText("COMPLEX NUMBERS/SEQUENCES");

        jPanelMain.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 102, 102), 10, true));

        txtInput.setText(" ");
        txtInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtInputKeyReleased(evt);
            }
        });

        btnGroup.add(rbtnFactorial);
        rbtnFactorial.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        rbtnFactorial.setForeground(new java.awt.Color(51, 0, 51));
        rbtnFactorial.setText("Find FACTORS");
        rbtnFactorial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtnFactorialActionPerformed(evt);
            }
        });

        btnGroup.add(rbtnPrime);
        rbtnPrime.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        rbtnPrime.setForeground(new java.awt.Color(51, 0, 51));
        rbtnPrime.setText("Check for PRIME");
        rbtnPrime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtnPrimeActionPerformed(evt);
            }
        });

        btnGroup.add(rbtnFibonaccii);
        rbtnFibonaccii.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        rbtnFibonaccii.setForeground(new java.awt.Color(51, 0, 51));
        rbtnFibonaccii.setText("Find FIBONACCII");
        rbtnFibonaccii.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtnFibonacciiActionPerformed(evt);
            }
        });

        lblTextMsg.setFont(new java.awt.Font("Tahoma", 3, 12)); // NOI18N
        lblTextMsg.setForeground(new java.awt.Color(0, 0, 255));
        lblTextMsg.setText("Input +ve integer down below :");

        lblFactorialAns.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        lblFactorialAns.setForeground(new java.awt.Color(0, 51, 51));
        lblFactorialAns.setText("Factorial Response");

        lblPrimeAns.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        lblPrimeAns.setForeground(new java.awt.Color(0, 51, 51));
        lblPrimeAns.setText("Prime Response");

        lblFibonacciAns.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        lblFibonacciAns.setForeground(new java.awt.Color(0, 51, 51));
        lblFibonacciAns.setText("Fibonaccii Response");

        lblErrorMsg.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        lblErrorMsg.setForeground(new java.awt.Color(255, 0, 0));
        lblErrorMsg.setText("Error Message");

        btnGroup.add(rbtnAll3);
        rbtnAll3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        rbtnAll3.setForeground(new java.awt.Color(51, 0, 51));
        rbtnAll3.setText("Calculate all 3");
        rbtnAll3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtnAll3ActionPerformed(evt);
            }
        });

        btnReset.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnReset.setForeground(new java.awt.Color(255, 0, 0));
        btnReset.setText("RESET");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        lblSubtitle.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        lblSubtitle.setForeground(new java.awt.Color(51, 51, 51));
        lblSubtitle.setText("Choose your Pick and see the instant results");
        lblSubtitle.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout jPanelMainLayout = new javax.swing.GroupLayout(jPanelMain);
        jPanelMain.setLayout(jPanelMainLayout);
        jPanelMainLayout.setHorizontalGroup(
            jPanelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelMainLayout.createSequentialGroup()
                .addGroup(jPanelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelMainLayout.createSequentialGroup()
                        .addGap(74, 74, 74)
                        .addComponent(txtInput, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(109, 109, 109)
                        .addGroup(jPanelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelMainLayout.createSequentialGroup()
                                .addComponent(rbtnFibonaccii)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                                .addComponent(btnReset))
                            .addComponent(rbtnPrime)
                            .addComponent(rbtnFactorial)
                            .addComponent(rbtnAll3)))
                    .addGroup(jPanelMainLayout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addGroup(jPanelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblPrimeAns, javax.swing.GroupLayout.PREFERRED_SIZE, 493, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblFactorialAns, javax.swing.GroupLayout.PREFERRED_SIZE, 493, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblFibonacciAns, javax.swing.GroupLayout.PREFERRED_SIZE, 493, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblErrorMsg, javax.swing.GroupLayout.PREFERRED_SIZE, 493, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblTextMsg, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelMainLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblSubtitle, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(137, 137, 137)))
                .addContainerGap())
        );
        jPanelMainLayout.setVerticalGroup(
            jPanelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelMainLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(lblSubtitle)
                .addGap(38, 38, 38)
                .addComponent(rbtnFactorial)
                .addGap(6, 6, 6)
                .addComponent(lblTextMsg)
                .addGap(1, 1, 1)
                .addComponent(rbtnPrime)
                .addGroup(jPanelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelMainLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnReset)))
                    .addGroup(jPanelMainLayout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(rbtnFibonaccii)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                .addComponent(rbtnAll3)
                .addGap(18, 18, 18)
                .addComponent(lblErrorMsg)
                .addGap(21, 21, 21)
                .addComponent(lblFactorialAns)
                .addGap(18, 18, 18)
                .addComponent(lblPrimeAns)
                .addGap(18, 18, 18)
                .addComponent(lblFibonacciAns)
                .addContainerGap())
        );

        lblInst1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblInst1.setForeground(new java.awt.Color(0, 153, 102));
        lblInst1.setText("Instruction 1 - Input number should be Posiive integer (>=0) for Factorials and Check Prime");

        lblInst2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblInst2.setForeground(new java.awt.Color(0, 153, 102));
        lblInst2.setText("Instruction 2 - Input number should be greater than 0 for Fibonacci");

        lblInst3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblInst3.setForeground(new java.awt.Color(0, 153, 102));
        lblInst3.setText("Instruction 3 - Input number for Fibonacci refers to Start Sequence (1st Position - F0 - Value '0')");

        lblInst4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblInst4.setForeground(new java.awt.Color(0, 153, 102));
        lblInst4.setText("                       2nd Position - F1 - Value '1' ; 3rd Position - F2 - Value '1' and so on)");

        lblIMG.setIcon(new javax.swing.ImageIcon(getClass().getResource("/MathFunNewJpg.jpg"))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(104, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lblIMG)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblTitle)
                        .addGap(199, 199, 199))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jPanelMain, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblInst2, javax.swing.GroupLayout.PREFERRED_SIZE, 589, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblInst1, javax.swing.GroupLayout.PREFERRED_SIZE, 589, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(108, 108, 108))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lblInst4)
                        .addGap(191, 191, 191))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(lblInst3)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(67, 67, 67)
                        .addComponent(lblTitle))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addComponent(lblIMG)))
                .addGap(51, 51, 51)
                .addComponent(lblInst1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblInst2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblInst3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblInst4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanelMain, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(98, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    //Event would be triggered, when user clicks the Factorial Radio Button
    private void rbtnFactorialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtnFactorialActionPerformed
        
        //Checking for spaces in the input text field and if so, setting Check Flag to FALSE and displays Error Message
        if ("".equals(txtInput.getText()))
        {
            Check_Flag = false;
            lblErrorMsg.setText("NO INPUT provided. Try again");
            txtInput.setBackground(Color.RED);
        }
        
        //Calling calcFactorial routine to calculate Factorials, by passing the input value as double and returning the double results
        if (Check_Flag == true)
        {
            Factorial_Result = calcFactorial(UI_Textvalue);
            lblFactorialAns.setText("The Factorial of  ' " + String.format("%.0f",UI_Textvalue) + " '  is                        :   " + Factorial_Result);
            lblPrimeAns.setText("");
            lblFibonacciAns.setText("");
        }
    }//GEN-LAST:event_rbtnFactorialActionPerformed
    
    /*
        calcFactorial

        This method calculates the Factors for the Double value and returns Double results

        Parameters  : double

        Returns     : double
    */
    public static double calcFactorial (double f)
    {
        // double variable declared to store the Factorial Results
        double Factorial_Result = 1;
        
       //using for loop, to calculate the factors for the given input number
        for (double i = 1; i <= f; i++)
        {
            Factorial_Result *= i;
        }
        
        return (Factorial_Result);
    }
    
    //Event would be triggered, when user clicks the Prime Radio Button
    private void rbtnPrimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtnPrimeActionPerformed
        
        //Checking for spaces in the input text field and if so, setting Check Flag to FALSE and displays Error Message
        if ("".equals(txtInput.getText()))
        {
            Check_Flag = false;
            lblErrorMsg.setText("NO INPUT provided. Try again");
            txtInput.setBackground(Color.RED);
        }
        
        //Calling calcPrime routine to check for PRIME, by passing the input value as Integer and returning the boolean results
        if (Check_Flag == true)
        {
            Prime_Result = calcPrime((int)UI_Textvalue);
            if (Prime_Result == true)
            {
                lblPrimeAns.setText("The inputted number  ' " + String.format("%.0f",UI_Textvalue) + " '  is            :   A-PRIME number");
            }
            else
            {
                lblPrimeAns.setText("The inputted number  ' " + String.format("%.0f",UI_Textvalue) + " '  is            :   NOT-A-PRIME number");
            }
            lblFactorialAns.setText("");
            lblFibonacciAns.setText("");
        }
    }//GEN-LAST:event_rbtnPrimeActionPerformed
    
    /*
        calcPrime

        This method determines whether the given integer is a PRIME or not and returns Boolean results

        Parameters  : int

        Returns     : boolean
    */
    public static boolean calcPrime (int p)
    {
        boolean prime_flag = true;
        
        // If the integer is <= 1, sets the flag to false to indicate the integer is NOT A PRIME.
        if (p <= 1)
        {
            prime_flag = false;
        }
              
        // Checking for any numbers divisible from 2 to the squareoot of the number    
        for (int i = 2; i <= Math.sqrt(p); i++)
            if (p % i == 0)
            {
                prime_flag = false;
            }
        // Subroutine returns true if no divider are found. Indicates the number is prime
        return (prime_flag);
    }
    
    //Event would be triggered, when user clicks the Fibonaccii Radio Button
    private void rbtnFibonacciiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtnFibonacciiActionPerformed
        
        //Checking for spaces in the input text field and if so, setting Check Flag to FALSE and displays Error Message
        if ("".equals(txtInput.getText()))
        {
            Check_Flag = false;
            lblErrorMsg.setText("NO INPUT provided. Try again");
            txtInput.setBackground(Color.RED);
        }
        
        //Calling calcFibonacci routine to calculate Fibonacci series, by passing the input value as double and returning the double results
        if (Check_Flag == true)
        {
            Fibonacci_Result = calcFibonacci(UI_Textvalue);
            if (UI_Textvalue > 0)
            {
                lblFibonacciAns.setText("The fibonacci number of  ' " + String.format("%.0f",UI_Textvalue) + " '   is      :   " + Fibonacci_Result);
            }
            lblFactorialAns.setText("");
            lblPrimeAns.setText("");
        }
    }//GEN-LAST:event_rbtnFibonacciiActionPerformed
    
    /*
        calcFibonacci

        This method calculates the Fibonacci sequence for given double value and returns double results

        Parameters  : double

        Returns     : double
    */
    public double calcFibonacci(double fi)
    {
        // double variable declared to store the Fibonnaci Number and temporary variables for calculating Fibonnaci sequence
        double Fib_Result = 1;  
        double a = 0;
        double b = 1;
        
        // if input double is 0, setting bad message for Fibonacci sequence
        if (fi == 0)
        {
            lblFibonacciAns.setText("Fibonacci number for input value 0 cannot be calculated. Try again");
        }
        
        // if input double is 1, setting Fibonacci Result to 0
        if (fi == 1)
        {
            Fib_Result = 0;
        }
        
        // for loop used to calculate the Fibonacci number for given input value
        for (int i = 2; i < fi; i++)
        {
            //Calculating the next fibonacci number in the sequence
            Fib_Result = a + b;
            //Changing a value to store older b values 
            a = b;
            // Changing b value to store the older Fibonacci numbers
            b = Fib_Result;
        }   
        
        return (Fib_Result);   
    }
    
    //Event would be triggered everytime a key is typed & released in the input text field
    private void txtInputKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtInputKeyReleased
        // TODO add your handling code here:
        
        Check_Flag = false;
        
        //Clearing the Answer labels for Factorial, Prime and Fibonaccii
        lblFactorialAns.setText("");
        lblPrimeAns.setText("");
        lblFibonacciAns.setText("");
        
        //Checking for spaces in the input text field and if so, setting Check Flag to FALSE and displays Error Message
        if ("".equals(txtInput.getText()))
        {
            Check_Flag = false;
            txtInput.setBackground(Color.WHITE);
            btnGroup.clearSelection();
        }
        else
        {  
            btnGroup.clearSelection();
     
            //Calling ValidateInput routine to check the validity of Integer input, by passing the input values as String and returning the boolean value
            Check_Flag = ValidateInput(txtInput.getText());
        }
    }//GEN-LAST:event_txtInputKeyReleased
    
    //Event would be triggered, when user clicks the CALCULATE ALL 3 Radio Button
    private void rbtnAll3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtnAll3ActionPerformed
        // TODO add your handling code here:
        
        //Checking for spaces in the input text field and if so, setting Check Flag to FALSE and displays Error Message
        if ("".equals(txtInput.getText()))
        {
            Check_Flag = false;
            lblErrorMsg.setText("NO INPUT provided. Try again");
            txtInput.setBackground(Color.RED);
        }
        
        //Calling all 3 routines to calculate Factorials, Prime and Fibonacci series, by passing the input value as Integer and returning the Integer results/Boolean
        if (Check_Flag == true)
        {
            Factorial_Result = calcFactorial(UI_Textvalue);
            lblFactorialAns.setText("The Factorial of  ' " + String.format("%.0f",UI_Textvalue) + " '  is                        :   " + Factorial_Result);
            
            Prime_Result = calcPrime((int)UI_Textvalue);
            if (Prime_Result == true)
            {
                lblPrimeAns.setText("The inputted number  ' " + String.format("%.0f",UI_Textvalue) + " '  is            :   A-PRIME number");
            }
            else
            {
                lblPrimeAns.setText("The inputted number  ' " + String.format("%.0f",UI_Textvalue) + " '  is            :   NOT-A-PRIME number");
            }
            
            Fibonacci_Result = calcFibonacci((int)UI_Textvalue);
            if (UI_Textvalue > 0)
            {
                lblFibonacciAns.setText("The fibonacci number of  ' " + String.format("%.0f",UI_Textvalue) + " '   is      :   " + Fibonacci_Result);
            }
        }
    }//GEN-LAST:event_rbtnAll3ActionPerformed
    
    //Event would be triggered when user clicks RESET button
    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed

        // Calling ProgInit procedure, to initialize input text fields, Error Message label, Answer labels and clears the Radio buttons
        ProgInit();
    }//GEN-LAST:event_btnResetActionPerformed
    
    /*
        ValidateInput

        This method validates the input String value for +ve Integer and returns Boolean flag

        Parameters  : String

        Returns     : Boolean
    */
    public boolean ValidateInput(String inputvalue)
    {
        boolean return_flag = false;
        
         //Uses try and catch to validate the data for INTEGER
        try
            {
                Validate_Integer = Integer.parseInt(inputvalue);
                UI_Textvalue = Validate_Integer;
                return_flag = true;
                txtInput.setBackground(Color.WHITE);
                lblErrorMsg.setText("");
            }

            catch (NumberFormatException e)
            {
                lblErrorMsg.setText("BAD INPUT. Expecting Integer value. Try again");
                txtInput.setBackground(Color.RED);
                btnGroup.clearSelection();
                return_flag = false;
            }  
        
        if (return_flag == true)
        {
            //Checks for Negative values and displays error message
            if (Validate_Integer < 0)
            {
                return_flag = false;
                lblErrorMsg.setText("BAD INPUT. Expecting positive value. Try again");
                txtInput.setBackground(Color.RED);
                btnGroup.clearSelection();
            }
        }
        return (return_flag);
    }
    
    /*
        ProgInit

        This method allows the User to initialize all the input Text field, radio buttons and message fields

        Parameters  : NONE

        Returns     : NONE
    */
    public void ProgInit() {                                               
        
        //Setting blanks to Input Text field and Error/Result labels
        txtInput.setText("");
        lblErrorMsg.setText("");
        lblFactorialAns.setText("");
        lblPrimeAns.setText("");
        lblFibonacciAns.setText("");
        
        //Clearning the Radio button selection for the Button Group
        btnGroup.clearSelection();
        
        lblSubtitle.setBackground(Color.yellow);
        txtInput.setBackground(Color.WHITE);
    } 
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmAlgorithmDesign.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmAlgorithmDesign.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmAlgorithmDesign.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmAlgorithmDesign.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmAlgorithmDesign().setVisible(true);
            }
        });
        
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup btnGroup;
    private javax.swing.JButton btnReset;
    private javax.swing.JPanel jPanelMain;
    private javax.swing.JLabel lblErrorMsg;
    private javax.swing.JLabel lblFactorialAns;
    private javax.swing.JLabel lblFibonacciAns;
    private javax.swing.JLabel lblIMG;
    private javax.swing.JLabel lblInst1;
    private javax.swing.JLabel lblInst2;
    private javax.swing.JLabel lblInst3;
    private javax.swing.JLabel lblInst4;
    private javax.swing.JLabel lblPrimeAns;
    private javax.swing.JLabel lblSubtitle;
    private javax.swing.JLabel lblTextMsg;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JRadioButton rbtnAll3;
    private javax.swing.JRadioButton rbtnFactorial;
    private javax.swing.JRadioButton rbtnFibonaccii;
    private javax.swing.JRadioButton rbtnPrime;
    private javax.swing.JTextField txtInput;
    // End of variables declaration//GEN-END:variables
}
